{"version":3,"file":"qbank_datafilter.min.js","sources":["../src/qbank_datafilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Question bank filter management.\n *\n * @module     core_question/qbank_datafilter\n * @copyright  2022 Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CoreFilter from 'core/datafilter';\n// import CourseFilter from 'core/datafilter/filtertypes/courseid';\n// import GenericFilter from 'core/datafilter/filtertype';\n// import {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\nimport GenericFilter from 'core/datafilter/filtertype';\n\nexport default class extends CoreFilter {\n    constructor(filterSet, applyCallback) {\n        super(filterSet, applyCallback);\n    }\n\n    /**\n     * Initialise event listeners to the filter.\n     */\n    init() {\n        // Add listeners for the main actions.\n        this.filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filterset.actions.addRow)) {\n                e.preventDefault();\n\n                this.addFilterRow();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n                e.preventDefault();\n\n                this.updateTableFromFilter();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n                e.preventDefault();\n\n                this.removeAllFilters();\n            }\n        });\n\n        // Add the listener to remove a single filter.\n        this.filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filter.actions.remove)) {\n                e.preventDefault();\n\n                this.removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n            }\n        });\n\n        // Add listeners for the filter type selection.\n        let filterRegion = jQuery(this.getFilterRegion());\n        CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n        filterRegion.on(CustomEvents.events.accessibleChange, e => {\n            const typeField = e.target.closest(Selectors.filter.fields.type);\n            if (typeField && typeField.value) {\n                const filter = e.target.closest(Selectors.filter.region);\n\n                this.addFilter(filter, typeField.value);\n            }\n        });\n\n        this.filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n            this.filterSet.dataset.filterverb = e.target.value;\n        });\n    }\n\n    addFilterRow(filterdata = {}) {\n        const pendingPromise = new Pending('core/datafilter:addFilterRow');\n        const rownum = filterdata.rownum ?? 1 + this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rownum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.appendNodeContents(this.getFilterRegion(), html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(result => {\n                pendingPromise.resolve();\n\n                if (Object.keys(filterdata).length !== 0) {\n                    result.forEach(filter => {\n                        this.addFilter(filter, filterdata.filtertype, filterdata.values,\n                            filterdata.jointype, filterdata.rangetype);\n                    });\n                }\n                return result;\n            })\n            .catch(Notification.exception);\n    }\n\n    async addFilter(filterRow, filterType, initialFilterValues, filterJoin, filterRange) {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = this.getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        this.activeFilters[filterType] = new Filter(filterType, this.filterSet, initialFilterValues, filterRange);\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n        // Update the join list.\n        //this.updateJoinList(filterDataNode.dataset.joinList, filterRow);\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        return this.activeFilters[filterType];\n    }\n\n    updateJoinList(filterJoinData, filterRow) {\n        const regularJoinList = [0, 1, 2];\n        const filterJoinList = JSON.parse(filterJoinData);\n        // eslint-disable-next-line no-console\n        console.log(regularJoinList);\n        // eslint-disable-next-line no-console\n        console.log(filterJoinList);\n        let toRemove = [];\n        regularJoinList.forEach((joinType) => {\n            if (!filterJoinList.includes(joinType)) {\n                toRemove.push(joinType);\n            }\n        });\n        // eslint-disable-next-line no-console\n        console.log(toRemove);\n        // Re-construct join type and list.\n        if (toRemove.length !== 0) {\n            const joinField = filterRow.querySelector(Selectors.filter.fields.join);\n            toRemove.forEach((joinType) => {\n                joinField.options.remove(joinType);\n            });\n            // joinField.value = filterJoin;\n        }\n    }\n}"],"names":["CoreFilter","constructor","filterSet","applyCallback","init","querySelector","Selectors","filterset","region","addEventListener","e","target","closest","actions","addRow","preventDefault","addFilterRow","applyFilters","updateTableFromFilter","resetFilters","removeAllFilters","regions","filterlist","filter","remove","removeOrReplaceFilterRow","filterRegion","this","getFilterRegion","define","CustomEvents","events","accessibleChange","on","typeField","fields","type","value","addFilter","join","dataset","filterverb","filterdata","pendingPromise","Pending","rownum","querySelectorAll","length","Templates","renderForPromise","then","_ref","html","js","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","innerHTML","updateFiltersOptions","result","resolve","Object","keys","filtertype","values","jointype","rangetype","catch","Notification","exception","filterType","initialFilterValues","filterJoin","filterRange","filterDataNode","getFilterDataSource","Filter","GenericFilter","filterTypeClass","activeFilters","disabled","updateJoinList","filterJoinData","regularJoinList","filterJoinList","JSON","parse","console","log","toRemove","joinType","includes","push","joinField","options"],"mappings":"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"}